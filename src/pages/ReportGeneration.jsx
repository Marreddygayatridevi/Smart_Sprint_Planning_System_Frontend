import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  MdWarning,
  MdDescription,
  MdCheckCircle,
  MdSummarize,
  MdRecommend,
  MdInfo,
  MdPictureAsPdf,
} from 'react-icons/md';
import { api } from '../api/axios';
import jsPDF from 'jspdf';

const ReportGeneration = ({ authToken, isLoggedIn, reportState, setReportState }) => {
  const navigate = useNavigate();
  const { issueKey, report, error } = reportState;
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!isLoggedIn || !authToken) {
      navigate("/login");
    }
  }, [navigate, isLoggedIn, authToken]);

  const getAuthHeaders = () => {
    if (!authToken) {
      navigate("/login");
      return null;
    }
    return { Authorization: `Bearer ${authToken}`, 'Content-Type': 'application/json' };
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!issueKey.trim()) {
      setReportState(prev => ({ ...prev, error: 'Please enter a valid issue key' }));
      return;
    }

    setLoading(true);
    setReportState(prev => ({ ...prev, error: '', report: null }));

    try {
      const headers = getAuthHeaders();
      if (!headers) return;

      const response = await api.get(`/ai/sprint-report/${issueKey}`, { headers });
      setReportState(prev => ({ ...prev, report: response.data }));
    } catch (err) {
      if (err.response?.status === 401) {
        navigate("/login");
        return;
      }
      const errorMessage = err.response?.data?.detail || err.message || 'An error occurred while generating the report';
      setReportState(prev => ({ ...prev, error: errorMessage }));
    } finally {
      setLoading(false);
    }
  };

  const handleReset = () => {
    setReportState({
      issueKey: '',
      report: null,
      error: ''
    });
  };

  const handleDownloadPDF = () => {
    if (!report) return;

    const doc = new jsPDF();
    let y = 10;
    const spacing = 10;

    const addSection = (title, content) => {
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(14);
      doc.text(title, 10, y);
      y += spacing;

      doc.setFont('helvetica', 'normal');
      doc.setFontSize(12);
      const lines = doc.splitTextToSize(content, 180);
      doc.text(lines, 10, y);
      y += lines.length * spacing;
    };

    // Header
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text("SPRINT REPORT", 10, y);
    y += spacing;

    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Issue Key: ${issueKey}`, 10, y);
    y += spacing;
    doc.text(`Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`, 10, y);
    y += spacing;

    // Report content
    if (report.summary) addSection("SUMMARY", report.summary);
    if (report.recommendations) addSection("RECOMMENDATIONS", report.recommendations);
    if (report.details) addSection("DETAILS", report.details);

    doc.text("Generated by Smart Sprint Planner", 10, y + spacing);
    doc.save(`sprint-report-${issueKey}-${new Date().toISOString().split('T')[0]}.pdf`);
  };

  const handleIssueKeyChange = (e) => {
    setReportState(prev => ({ ...prev, issueKey: e.target.value }));
  };

  if (!isLoggedIn || !authToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Checking authentication...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">Sprint Report Generation</h1>
          <p className="text-gray-600">Generate comprehensive AI-powered sprint reports for your Jira issues</p>
        </div>

        {/* Input Form */}
        <div className="bg-white rounded-lg shadow-lg p-8 mb-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="issueKey" className="block text-sm font-semibold text-gray-700 mb-2">
                Project Key
              </label>
              <input
                type="text"
                id="issueKey"
                value={issueKey}
                onChange={handleIssueKeyChange}
                placeholder="Enter Project Key"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-gray-700 placeholder-gray-400"
                disabled={loading}
              />
            </div>

            {error && (
              <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded">
                <div className="flex items-center">
                  <MdWarning className="h-5 w-5 text-red-400 mr-2" />
                  <p className="text-sm text-red-700">{error}</p>
                </div>
              </div>
            )}

            <div className="flex gap-4">
              <button
                type="submit"
                disabled={loading}
                className={`flex-1 py-3 px-6 rounded-lg font-semibold text-white ${
                  loading
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-blue-600 hover:bg-blue-700 shadow-lg hover:shadow-xl'
                }`}
              >
                {loading ? (
                  <div className="flex items-center justify-center gap-2">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    <span>Generating Report...</span>
                  </div>
                ) : (
                  <div className="flex items-center justify-center gap-2">
                    <MdDescription className="w-5 h-5" />
                    Generate Report
                  </div>
                )}
              </button>

              {(report || error) && (
                <button
                  type="button"
                  onClick={handleReset}
                  className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 shadow-lg"
                >
                  Reset
                </button>
              )}
            </div>
          </form>
        </div>

        {/* Loading Animation */}
        {loading && (
          <div className="bg-white rounded-lg shadow-lg p-8 mb-8">
            <div className="flex flex-col items-center justify-center py-12">
              <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-500 mb-6"></div>
              <p className="text-lg font-medium text-gray-700">AI is analyzing your project...</p>
              <p className="text-sm text-gray-500 mt-2">This may take a few moments</p>
            </div>
          </div>
        )}

        {/* Report Display */}
        {report && !loading && (
          <div className="bg-white rounded-lg shadow-lg overflow-hidden mb-8">
            {/* Success Header */}
            <div className="bg-green-500 px-8 py-6">
              <div className="flex items-center gap-3">
                <div className="bg-white rounded-full p-2">
                  <MdCheckCircle className="w-6 h-6 text-green-600" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white">Sprint Report Generated Successfully!</h2>
                  <p className="text-green-100 mt-1">Issue Key: {issueKey}</p>
                </div>
              </div>
            </div>

            {/* Report Content */}
            <div className="p-8 space-y-6">
              {report.summary && (
                <div className="bg-blue-50 rounded-lg p-6 border-l-4 border-blue-400">
                  <h3 className="text-lg font-semibold text-blue-800 mb-3 flex items-center gap-2">
                    <MdSummarize className="w-5 h-5" />
                    Summary
                  </h3>
                  <p className="text-blue-700">{report.summary}</p>
                </div>
              )}

              {report.recommendations && (
                <div className="bg-amber-50 rounded-lg p-6 border-l-4 border-amber-400">
                  <h3 className="text-lg font-semibold text-amber-800 mb-3 flex items-center gap-2">
                    <MdRecommend className="w-5 h-5" />
                    Recommendations
                  </h3>
                  <div className="text-amber-700 whitespace-pre-wrap">{report.recommendations}</div>
                </div>
              )}

              {report.details && (
                <div className="bg-green-50 rounded-lg p-6 border-l-4 border-green-400">
                  <h3 className="text-lg font-semibold text-green-800 mb-3 flex items-center gap-2">
                    <MdInfo className="w-5 h-5" />
                    Details
                  </h3>
                  <div className="text-green-700 whitespace-pre-wrap">{report.details}</div>
                </div>
              )}

              {/* Download PDF Button */}
              <div className="flex justify-center pt-4">
                <button
                  onClick={handleDownloadPDF}
                  className="flex items-center gap-2 px-8 py-4 bg-green-500 text-white rounded-lg hover:bg-green-600 shadow-lg hover:shadow-xl font-semibold text-lg"
                  title="Download report as PDF"
                >
                  <MdPictureAsPdf className="w-6 h-6" />
                  Download PDF
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Empty State */}
        {!report && !loading && !error && (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-blue-100 rounded-lg mx-auto mb-4 flex items-center justify-center">
              <MdDescription className="w-8 h-8 text-blue-600" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">No report generated yet</h3>
            <p className="text-gray-500">Enter a project key above to generate an AI-powered sprint report</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ReportGeneration;